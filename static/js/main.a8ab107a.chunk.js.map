{"version":3,"sources":["fonts/Relax.ttf","fonts/WaterFire.otf","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","analytics","Site","props","state","isOnPrototype","toggleState","bind","this","setState","id","data-tip","onClick","globalEventOff","Prototype","className","React","Component","Bulles","class","Presentation","isOnLightbox","NumberText","titre","textelire","titrelire","useAuthState","user","SignOut","ChatRoom","SignIn","provider","GoogleAuthProvider","signInWithPopup","currentUser","signOut","dummy","useRef","messagesRef","collection","query","orderBy","limitToLast","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","key","message","ref","onSubmit","value","onChange","target","placeholder","type","disabled","messageClass","src","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a8ab107a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Relax.03e2b60b.ttf\";","module.exports = __webpack_public_path__ + \"static/media/WaterFire.376b5576.otf\";","/* Importation des fichiers nécessaires */\r\n\r\nimport React, { useRef, useState } from 'react';\r\nimport './App.css';\r\n\r\nimport firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/firestore';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/analytics';\r\n\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nimport { useAuthState } from 'react-firebase-hooks/auth';\r\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\r\n\r\n/* Connection du firebase au projet */\r\n\r\nfirebase.initializeApp({\r\n  apiKey: \"AIzaSyCc56Iksic3DyqOSsKhF-8l1EXRh-cF8SY\",\r\n  authDomain: \"youkhatvfour.firebaseapp.com\",\r\n  projectId: \"youkhatvfour\",\r\n  storageBucket: \"youkhatvfour.appspot.com\",\r\n  messagingSenderId: \"1012311611964\",\r\n  appId: \"1:1012311611964:web:16de4b315e4127e8dd0139\",\r\n  measurementId: \"G-N5Z5SMPMY4\"\r\n})\r\n\r\nconst auth = firebase.auth();\r\nconst firestore = firebase.firestore();\r\nconst analytics = firebase.analytics();\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Site />\r\n      <Bulles />\r\n    </div>\r\n  );\r\n}\r\n\r\nclass Site extends React.Component {\r\n/* Cette fonction affiche le UI du Prototype ou le UI de la Présentation\r\nCela depend de l'interaction */\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      /* L'état de base est faux */\r\n     isOnPrototype: false\r\n    }\r\n \r\n    /* Nécessaire pour permette de faire des interactions avec des class */\r\n    this.toggleState = this.toggleState.bind(this);\r\n  }\r\n    \r\n  toggleState() {\r\n  this.setState ({\r\n    /* Change le status pour l'inverse de ce qu'il est présentement */\r\n   isOnPrototype:!this.state.isOnPrototype }\r\n  )\r\n } \r\n\r\n  render(){\r\n   if(this.state.isOnPrototype){\r\n     /* Si isOnPrototype est true, alors on affiche la fonction prototype, qui affiche le prototype */\r\n     return(\r\n       <>\r\n       <div id=\"BoutonToggle\">\r\n       <button data-tip=\"Cliquez ici pour retourner dans le site de présentation!\" onClick={this.toggleState}>YouKhAt</button>\r\n       <ReactTooltip globalEventOff=\"click\" />\r\n       </div>\r\n     <Prototype />\r\n     </>   \r\n     )\r\n     }\r\n   else{\r\n     /* Si isOnPrototype est false, alors on affiche la fonction présentation, qui affiche la présentation */\r\n     return(\r\n     <>\r\n     <div id=\"BulleToggle\">\r\n      <div className=\"bulle\" data-tip=\"Cliquez pour vous lancer dans le prototype!\" onClick={this.toggleState}><h1>Clavardez!</h1></div>\r\n      </div>\r\n      <ReactTooltip globalEventOff=\"click\" />\r\n     <Presentation />\r\n     </>\r\n     )          \r\n   }       \r\n }\r\n}\r\n\r\n/* Notre générateur de bulles */\r\nfunction Bulles() {\r\n  return (\r\n    <div id=\"background-wrap\">\r\n    <div class=\"bubble x1\"></div>\r\n    <div class=\"bubble x2\"></div>\r\n    <div class=\"bubble x3\"></div>\r\n    <div class=\"bubble x4\"></div>\r\n    <div class=\"bubble x5\"></div>\r\n    <div class=\"bubble x6\"></div>\r\n    <div class=\"bubble x7\"></div>\r\n    <div class=\"bubble x8\"></div>\r\n    <div class=\"bubble x9\"></div>\r\n    <div class=\"bubble x10\"></div>\r\n</div>\r\n  )\r\n}\r\n\r\nclass Presentation extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      /* Ici, c'est le même concept qu'avec le changement entre la présentation et le prototype, mais cette fois-ci avec des lightbox */\r\n     isOnLightbox: false,\r\n     /* Ce numéro est important afin de traquer dans quelle div l'utilisateur a cliqué. Le contenu généré va ainsi dépendre */\r\n     NumberText: 0\r\n    }\r\n \r\n    this.toggleState = this.toggleState.bind(this);\r\n  }\r\n    \r\n  toggleState() {\r\n  this.setState ({\r\n     /* Change le status pour l'inverse de ce qu'il est présentement */\r\n   isOnLightbox:!this.state.isOnLightbox \r\n  })\r\n } \r\n\r\n render() {\r\n    /* Les textes et les titres sont gérées ici. Changer le texte et le contenu changera aussi */\r\n  const texte = [\"React.js est une librairie Javascript qui offre beaucoup de possibilités afin de créer multiple interactions du côté client. On peut afficher du contenu dans certaines conditions aussi.\", \r\n  \"Firebase est une base de données gratuite et en ligne. Il est très facile de connecter Firebase avec React.js et de créer du contenu qui est géré en back-end.\", \r\n  \"Codecademy est un site web qui offre des cours d'apprentissage autonome, gratuit et avec instructions sur des langages de programmation, telles que le Javascript et React.Js. C'est comme ça que j'ai ainsi appris à pouvoir lire et écrire du React.\"]\r\n  const titre = [\"Avec React.js\", \"Avec Firebase\", \"Appris sur Codecademy\"]\r\n\r\n  /* Sélectionne le texte à afficher, basé sur le NumberText d'en haut */\r\n  const textelire = texte[this.state.NumberText]\r\n  const titrelire = titre[this.state.NumberText]\r\n\r\n  if(this.state.isOnLightbox) {\r\n    /* Si isOnLightbox est true, on affiche le contenu avec lightbox */\r\n  return (\r\n  <div className=\"Intro\">\r\n    <div className=\"backgroundlightbox\">\r\n    <div className=\"lightbox\">\r\n      <div className=\"Headerlightbox\">\r\n      <h2>{titrelire}</h2>\r\n      <button onClick={this.toggleState}>X</button>\r\n      </div>\r\n      <div className=\"textcontainer\">\r\n      <p>{textelire}</p>\r\n      </div>\r\n    </div>\r\n    </div>\r\n<section>\r\n    <div id = \"bloc1\" className=\"bullesection\">\r\n        <h1>{titre[0]}</h1>\r\n    </div>\r\n    <div id = \"bloc2\" className=\"bullesection\">\r\n        <h1>{titre[1]}</h1>\r\n    </div>\r\n    <div id = \"bloc3\" className=\"bullesection\">\r\n        <h1>{titre[2]}</h1>\r\n    </div>\r\n</section>\r\n</div>\r\n  )\r\n  }\r\n  else {\r\n    return (\r\n      <div className=\"Intro\">\r\n  <section>\r\n      <ReactTooltip globalEventOff=\"click\" />\r\n      <div id = \"bloc1\" className=\"bullesection\" data-tip=\"Cliquez pour plus de détail!\" onClick={() => {\r\n        /* Cliquer sur une bulle spécifique de la section va changer cette variable et ainsi générer le contenu\r\n        basé sur ce qui a été cliqué */\r\n        this.toggleState();\r\n        this.setState ({\r\n          NumberText: 0\r\n        })}}\r\n        >\r\n          <h1>{titre[0]}</h1>\r\n      </div>\r\n      <div id = \"bloc2\" className=\"bullesection\" data-tip=\"Cliquez pour plus de détail!\" onClick={() => {\r\n        this.toggleState();\r\n        this.setState ({\r\n          NumberText: 1\r\n        })}} >\r\n          <h1>{titre[1]}</h1>\r\n      </div>\r\n      <div id = \"bloc3\" className=\"bullesection\" data-tip=\"Cliquez pour plus de détail!\" onClick={() => {\r\n        this.toggleState();\r\n        this.setState ({\r\n          NumberText: 2\r\n        })}}>\r\n          <h1>{titre[2]}</h1>\r\n      </div>\r\n  </section>\r\n  </div>\r\n    )\r\n  }\r\n}\r\n}\r\n\r\n/* Prototype */\r\n\r\nfunction Prototype() {\r\n  const [user] = useAuthState(auth);\r\n    /* Si on est connecté, on affiche le ChatRoom, sinon on affiche le SignIn */\r\n return (\r\n  <div className=\"Prototype\">\r\n  <header>\r\n    <h1>YouKhAt</h1>\r\n    <SignOut />\r\n  </header>\r\n  {user ? <ChatRoom /> : <SignIn />}\r\n</div>\r\n )\r\n}\r\n\r\n/* Gestion de connection */\r\n\r\nfunction SignIn() {\r\n\r\n  const signInWithGoogle = () => {\r\n    /* Permet de se connecter avec google sur notre firebase */\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n    auth.signInWithPopup(provider);\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <section>\r\n      <button className=\"sign-in\" data-tip=\"Cliquez ici pour vous connecter utilisant un compte Google\" onClick={signInWithGoogle}>Connecter avec Google</button>\r\n      <ReactTooltip globalEventOff=\"click\" />\r\n    </section> \r\n    </>\r\n  )\r\n\r\n}\r\n\r\nfunction SignOut() {\r\n  /* Permet de déconnecter du compte google */\r\n  return auth.currentUser && (\r\n    <>\r\n     <ReactTooltip globalEventOff=\"click\" />\r\n    <button className=\"sign-out\" data-tip=\"Cliquez ici pour vous déconnecter\" onClick={() => auth.signOut()}><p>Déconnecter</p></button>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n/* Gestion du clavardage */\r\n\r\nfunction ChatRoom() {\r\n  const dummy = useRef();\r\n\r\n   /* On prends les messages de notre collection et on les limite aux 50 derniers, basé sur leur temps d'envoi */\r\n  const messagesRef = firestore.collection('messages');\r\n  const query = messagesRef.orderBy('createdAt').limitToLast(50);\r\n  const [messages] = useCollectionData(query, { idField: 'id' });\r\n\r\n  const [formValue, setFormValue] = useState('');\r\n\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { uid, photoURL } = auth.currentUser;\r\n/* On cherche le texte du form, le temps d'envoi, l'uid et l'url de la photo google de celui qui envoie un */\r\n    await messagesRef.add({\r\n      text: formValue,\r\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n      uid,\r\n      photoURL\r\n    })\r\n\r\n    setFormValue('');\r\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n\r\n  return (\r\n    /* C'est ici que tous les messages se retournent en forme de array */\r\n    /* La fonction qui envoie des messages s'activent quand on appuie sur le bouton */\r\n    <section>\r\n    <main>\r\n\r\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\r\n\r\n      <span ref={dummy}></span>\r\n\r\n    </main>\r\n\r\n    <form onSubmit={sendMessage}>\r\n      <input value={formValue} data-tip=\"Écrivez votre message à envoyer ici\" onChange={(e) => setFormValue(e.target.value)} placeholder=\"Écrire votre message\" />\r\n\r\n      <button type=\"submit\" data-tip=\"Cliquez ici pour envoyer votre message\" disabled={!formValue}>Envoyer</button>\r\n     \r\n    </form>\r\n    <ReactTooltip globalEventOff=\"click\" />\r\n    </section>\r\n  )\r\n}\r\n\r\n/* L'array se transforme en blocs de div séparés et ainsi sont lus*/\r\nfunction ChatMessage(props) {\r\n  const { text, uid, photoURL} = props.message;\r\n\r\n  /* Si c'est nous qui envoyons un message, on ajoute la classe sent, sinon, on ajoute la classe received */\r\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\r\n\r\n  // const DeleteMessage = firestore.collection('messages').doc('RAoTYP5A99uEfvmYc0dp').delete()\r\n\r\n  return (</* Le contenu est finalement lu dans le site */>\r\n  \r\n    <div className={`message ${messageClass}`}>\r\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\r\n      <p>{text}</p>\r\n    </div>\r\n  </>)\r\n\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './fonts/Relax.ttf';\r\nimport './fonts/WaterFire.otf';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}